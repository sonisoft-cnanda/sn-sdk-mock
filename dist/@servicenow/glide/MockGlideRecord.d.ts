import { Database } from "../../data/Database.js";
import { MockGlideElement } from "./MockGlideElement.js";
import { MockGlideQueryCondition } from "./MockGlideQueryCondition.js";
export declare class MockGlideRecord {
    _database: Database;
    private _mockNew;
    get mockNew(): any;
    set mockNew(value: any);
    private _tableName;
    private _mockQuery;
    get mockQuery(): unknown[];
    set mockQuery(value: unknown[]);
    private _mockCallCount;
    private _mockRecordCount;
    private _mockCurrent;
    get mockCurrent(): Record<string, any>;
    set mockCurrent(value: Record<string, any>);
    private _mockIndex;
    get mockIndex(): number;
    set mockIndex(value: number);
    private _mockLimit;
    get mockLimit(): number;
    set mockLimit(value: number);
    private _operation;
    private _data;
    get data(): any[];
    set data(value: any[]);
    private _isNewRecord;
    set newRecord(value: boolean);
    private _conditions;
    get conditions(): MockGlideQueryCondition[];
    set conditions(value: MockGlideQueryCondition[]);
    generateGUID(): string;
    constructor(tableName: string);
    initialize(): void;
    initProperties(): void;
    defineProperty(prop: any): void;
    isElementReferenceType(propName: any): boolean;
    initQueryGr(): void;
    operation(): string;
    next(): boolean;
    get(sysId: string): Record<string, any>;
    isNewRecord(): boolean;
    addEncodedQuery(query: string): void;
    addActiveQuery(...args: any[]): void;
    addNotNullQuery(name: string): void;
    addNullQuery(fieldName: string): MockGlideQueryCondition;
    addQuery(name?: string, oper?: string, value?: any): MockGlideQueryCondition;
    query(): void;
    deleteMultiple(): this;
    insert(): any;
    private getBusinessRules;
    update(): any;
    setLimit(limit: number): void;
    setValue(column: string, value: string): void;
    getValue(column: string): any;
    getElement(column: string): MockGlideElement;
    getUniqueValue(): any;
    isValidField(): boolean;
    isValidRecord(): boolean;
    isValid(): boolean;
    getTableName(): string;
    getRecordClassName(): string;
    getRowCount(): number;
    hasNext(): boolean;
    addRecord(record: any): void;
    reset(): void;
    setMockData(data: any[]): void;
    getMockData(): any[];
}
//# sourceMappingURL=MockGlideRecord.d.ts.map