declare const ActualBaseClass: any;
export declare class MockVulnerabilityIntegrationBase extends ActualBaseClass {
    integrationGr: any;
    integrationProcessGr: any;
    sizeLimitExceeded: boolean;
    _nextRunParams: any;
    _hasMoreData: boolean;
    initialize(): void;
    retrieveData(): {
        contents: string;
        contentType: string;
        extension: string;
    };
    hasMoreData(optBoolean: boolean): boolean;
    finalizeRun(): boolean;
    deleteAttachments(tableName: string, recordSysId: string): void;
    getNextRunParameters(): any;
    setNextRunParameters(paramObject: any): void;
    _getProcessParameters(): any;
    _getRunParameters(): any;
    validateRetrievedData(result: any): boolean;
    validateAttachmentSize(report: any, process: any): void;
    skipRetryByScheduleJob(integrationProcessGr: any): boolean;
    shouldRetry(process: any): boolean;
    getNextRetry(retry: number | string): number;
    getMaxRetry(): number;
    onDataProcessed(process: any, result: any): void;
    countDownloadedAttachmets(process: any): void;
    countProcesses(process: any): void;
    onImportQueueProcessed(process: any): void;
    countProcessedAttachment(process: any): void;
    _updateIntegrationProcess(procGr: any, state: string, notes?: string): void;
    onProcessComplete(process: any): void;
    onRunWaitForComplete(integrationRun: any): void;
    _checkInteRunComplete(integrationGr: any): boolean;
    _checkInteRunError(integrationGr: any): boolean;
    _updateIntegrationRun(runGrId: string, isComplete: boolean, isError: boolean, totals: any): void;
    _calculateCount(inteRun: any): {
        import_vi: number;
        vi_created: number;
        vi_updated: number;
        vi_unchanged: number;
        vi_duplicates: number;
        vi_ignored: number;
        det_created: number;
        det_updated: number;
        det_unchanged: number;
        det_excluded: number;
        det_ignored: number;
        import_ci: number;
        ci_created: number;
        ci_identified: number;
        ci_ignored: number;
        vi_updated_new_findings: number;
    };
    isProcessStartedByFramework(process: any): boolean;
    validateXML(body: string, errorNodeName?: string): void;
    _shouldAutoTruncate(process: any): boolean;
    _getTruncationLimit(actualTruncation: number, currentSize: number, threshold: number): number;
    getStatusCodeMessage(statusCode: number, placeholder: string): string;
    type(): string;
}
export {};
//# sourceMappingURL=MockVulnerabilityIntegrationBase.d.ts.map