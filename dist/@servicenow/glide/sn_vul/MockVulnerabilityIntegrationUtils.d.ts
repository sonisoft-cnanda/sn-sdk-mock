export declare class MockVulnerabilityIntegrationUtils {
    _MAX_PROC_TIME_S: number;
    _MAX_RETRIES: number;
    constructor();
    addIntegrationRun: jest.Mock<string, [integrationGr: any, optInitialState?: any], any>;
    _checkWhetherToRun: jest.Mock<any, [integrationGr: any], any>;
    _checkExistingRunInReady: jest.Mock<boolean, [integrationGr: any], any>;
    shouldStartIntegrationRun: jest.Mock<boolean, [integrationRunGr: any], any>;
    markProcessAsTimeOut: jest.Mock<void, [integrations: any, agentcorrelatorMap: any, timeOut: any], any>;
    _handleLongRunningProcess: jest.Mock<void, [correlators: any, rangeStarting: any, timeOut: any], any>;
    getNextIntegrationRun: jest.Mock<any, [integrationSysId: any], any>;
    _isThirdPartyEntryIntegration: jest.Mock<boolean, [integrationGr: any], any>;
    onIntegrationRunComplete: jest.Mock<void, [integrationRun: any], any>;
    startIntegrationRun: jest.Mock<string, [runGr: any], any>;
    _getBackgroundJobRunning: jest.Mock<any, [jobList: any], any>;
    _checkWhetherProofGranularityJobRunning: jest.Mock<boolean, [], any>;
    updateIntegrationRun: jest.Mock<void, [runGr: any, state: any, substate: any, notes: any, fatal_error_id: any, fatal_error_message: any, parameterRaw: any, parameterDisplay: any], any>;
    updateIntegrationProcess: jest.Mock<void, [procGr: any, state: any, notes: any], any>;
    addProcessRun: jest.Mock<string, [runGr: any, parameters: any], any>;
    kickTimedOutIntegrationRuns: jest.Mock<void, [], any>;
    cleanupOldProcessAttachments: jest.Mock<void, [], any>;
    getIntegrationRunRecord: jest.Mock<any, [integrationProcessGr: any], any>;
    retryProcesses: jest.Mock<void, [], any>;
    retryCancelledProcesses: jest.Mock<void, [], any>;
    retryErroredProcesses: jest.Mock<void, [], any>;
    _retryErroredProcess: jest.Mock<void, [intProcGr: any], any>;
    _copyProcess: jest.Mock<string, [intProcGr: any, isProcessErrored: any], any>;
    haltIntegrationRun: jest.Mock<any, [scopeId: any, runList: any], any>;
    _deleteIntegrationProcess: jest.Mock<any[], [integrationRunList: any], any>;
    _deleteQueueEntry: jest.Mock<void, [integrationProcessList: any], any>;
    deleteIntegrationData: jest.Mock<void, [sourceName: any], any>;
    mergeJSON: jest.Mock<any, [json: any, jsonContent: any], any>;
    checkIfNeedsProcessing: jest.Mock<boolean, [integrationGr: any], any>;
}
//# sourceMappingURL=MockVulnerabilityIntegrationUtils.d.ts.map